{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-40f061db\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, _toDisplayString(this.word), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","word"],"sources":["/home/p4s3r0/Desktop/vue-text-scramble-animation/src/components/WordScrambler.vue"],"sourcesContent":["<template>\n  <div id=\"container\">\n      <p>{{ this.word }}</p>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'App',\n  props: {\n    text: {\n      type: String,\n      default: \"hi\"\n    },\n    init: {\n      String,\n      default: \"ABCDEFGDS\",\n    },\n    time: {\n      type: Number,\n      default: 1,\n    },\n    scramble_character: {\n      type: String,\n      default: \"ABCDEFGHIJKLMNOPQRSTUVXYZ0123456789#+;-\"\n    } ,\n    animationType: {\n      type: String,\n      default: \"random\"\n    },\n  },\n  components: {\n  },\n  data() {\n    return {\n      scramble_iteration: 0,\n      repeater: null,\n      word: this.init,\n    }\n  },\n  methods: {\n    scramble() {\n      let end = false;\n      let final_stage = false;\n      this.scramble_iteration++;\n      if (this.scramble_iteration >= this.time) {\n        final_stage = true;\n      }\n      let new_word = \"\"\n      for(let i = 0; i < this.text.length; i++)\n      {\n        let random_char = this.word.charAt(i);\n\n        if (!final_stage && Math.random() < 0.5) {\n          random_char = this.scramble_character.charAt(Math.floor(Math.random()*this.scramble_character.length))\n        }\n        if (final_stage) {\n          // reveal word linear\n          if(this.animationType == \"linear\")\n          {\n            if(i < this.scramble_iteration-10) {\n              random_char = this.text.charAt(i);\n            }\n          } else {\n            // reveal word random\n            if (Math.random() < 0.2) {\n              random_char = this.text.charAt(i);\n            }\n          }\n        }\n        new_word = new_word + random_char;\n        if (new_word === this.text) {\n          end = true;\n        }\n      }\n      this.word = new_word; \n      if (end) {\n        clearInterval(this.repeater);\n      }\n    }\n  },\n  mounted() {\n    this.repeater = setInterval(this.scramble, 50);\n  }\n}\n</script>\n\n<style scoped>\n\np {\n  font-family: 'mainFont', Times, serif;\n  color: white;\n  font-size: 10em;\n}\n\n\n@media only screen and (max-width: 800px) {\n  p {\n    font-size: 3em;\n  }\n}\n</style>\n"],"mappings":";;;EACOA,EAAE,EAAC;AAAW;;uBAAnBC,mBAAA,CAEM,OAFNC,UAEM,GADFC,mBAAA,CAAsB,WAAAC,gBAAA,MAAXC,IAAI,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}