{"ast":null,"code":"export default {\n  name: 'App',\n  props: {\n    text: {\n      type: String,\n      default: \"hi\"\n    },\n    init: {\n      String,\n      default: \"ABCDEFGDS\"\n    },\n    time: {\n      type: Number,\n      default: 5\n    },\n    scramble_character: {\n      type: String,\n      default: \"ABCDEFGHIJKLMNOPQRSTUVXYZ0123456789#+;-\"\n    },\n    animationType: {\n      type: String,\n      default: \"random\"\n    }\n  },\n  components: {},\n  data() {\n    return {\n      scramble_iteration: 0,\n      repeater: null,\n      word: this.init\n    };\n  },\n  methods: {\n    scramble() {\n      let end = false;\n      let final_stage = false;\n      this.scramble_iteration++;\n      if (this.scramble_iteration >= this.time) {\n        final_stage = true;\n      }\n      let new_word = \"\";\n      for (let i = 0; i < this.text.length; i++) {\n        let random_char = this.word.charAt(i);\n        if (!final_stage && Math.random() < 0.5) {\n          random_char = this.scramble_character.charAt(Math.floor(Math.random() * this.scramble_character.length));\n        }\n        if (final_stage) {\n          // reveal word linear\n          if (this.animationType == \"linear\") {\n            if (i < this.scramble_iteration - 10) {\n              random_char = this.text.charAt(i);\n            }\n          } else {\n            // reveal word random\n            if (Math.random() < 0.2) {\n              random_char = this.text.charAt(i);\n            }\n          }\n        }\n        new_word = new_word + random_char;\n        if (new_word === this.text) {\n          end = true;\n        }\n      }\n      this.word = new_word;\n      if (end) {\n        clearInterval(this.repeater);\n      }\n    }\n  },\n  mounted() {\n    this.repeater = setInterval(this.scramble, 50);\n  }\n};","map":{"version":3,"names":["name","props","text","type","String","default","init","time","Number","scramble_character","animationType","components","data","scramble_iteration","repeater","word","methods","scramble","end","final_stage","new_word","i","length","random_char","charAt","Math","random","floor","clearInterval","mounted","setInterval"],"sources":["/home/p4s3r0/Desktop/vue-text-scramble-animation/src/components/WordScrambler.vue"],"sourcesContent":["<template>\n  <div id=\"container\">\n      <p>{{ this.word }}</p>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'App',\n  props: {\n    text: {\n      type: String,\n      default: \"hi\"\n    },\n    init: {\n      String,\n      default: \"ABCDEFGDS\",\n    },\n    time: {\n      type: Number,\n      default: 5,\n    },\n    scramble_character: {\n      type: String,\n      default: \"ABCDEFGHIJKLMNOPQRSTUVXYZ0123456789#+;-\"\n    } ,\n    animationType: {\n      type: String,\n      default: \"random\"\n    },\n  },\n  components: {\n  },\n  data() {\n    return {\n      scramble_iteration: 0,\n      repeater: null,\n      word: this.init,\n    }\n  },\n  methods: {\n    scramble() {\n      let end = false;\n      let final_stage = false;\n      this.scramble_iteration++;\n      if (this.scramble_iteration >= this.time) {\n        final_stage = true;\n      }\n      let new_word = \"\"\n      for(let i = 0; i < this.text.length; i++)\n      {\n        let random_char = this.word.charAt(i);\n\n        if (!final_stage && Math.random() < 0.5) {\n          random_char = this.scramble_character.charAt(Math.floor(Math.random()*this.scramble_character.length))\n        }\n        if (final_stage) {\n          // reveal word linear\n          if(this.animationType == \"linear\")\n          {\n            if(i < this.scramble_iteration-10) {\n              random_char = this.text.charAt(i);\n            }\n          } else {\n            // reveal word random\n            if (Math.random() < 0.2) {\n              random_char = this.text.charAt(i);\n            }\n          }\n        }\n        new_word = new_word + random_char;\n        if (new_word === this.text) {\n          end = true;\n        }\n      }\n      this.word = new_word; \n      if (end) {\n        clearInterval(this.repeater);\n      }\n    }\n  },\n  mounted() {\n    this.repeater = setInterval(this.scramble, 50);\n  }\n}\n</script>\n\n<style scoped>\n\np {\n  font-family: 'mainFont', Times, serif;\n  color: white;\n  font-size: 10em;\n}\n\n\n@media only screen and (max-width: 800px) {\n  p {\n    font-size: 3em;\n  }\n}\n</style>\n"],"mappings":"AAQA,eAAe;EACbA,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IACDC,IAAI,EAAE;MACJF,MAAM;MACNC,OAAO,EAAE;IACX,CAAC;IACDE,IAAI,EAAE;MACJJ,IAAI,EAAEK,MAAM;MACZH,OAAO,EAAE;IACX,CAAC;IACDI,kBAAkB,EAAE;MAClBN,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX;IACAK,aAAa,EAAE;MACbP,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACDM,UAAU,EAAE,CACZ,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,kBAAkB,EAAE,CAAC;MACrBC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,IAAI,CAACT;IACb;EACF,CAAC;EACDU,OAAO,EAAE;IACPC,QAAQA,CAAA,EAAG;MACT,IAAIC,GAAE,GAAI,KAAK;MACf,IAAIC,WAAU,GAAI,KAAK;MACvB,IAAI,CAACN,kBAAkB,EAAE;MACzB,IAAI,IAAI,CAACA,kBAAiB,IAAK,IAAI,CAACN,IAAI,EAAE;QACxCY,WAAU,GAAI,IAAI;MACpB;MACA,IAAIC,QAAO,GAAI,EAAC;MAChB,KAAI,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAACnB,IAAI,CAACoB,MAAM,EAAED,CAAC,EAAE,EACxC;QACE,IAAIE,WAAU,GAAI,IAAI,CAACR,IAAI,CAACS,MAAM,CAACH,CAAC,CAAC;QAErC,IAAI,CAACF,WAAU,IAAKM,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,EAAE;UACvCH,WAAU,GAAI,IAAI,CAACd,kBAAkB,CAACe,MAAM,CAACC,IAAI,CAACE,KAAK,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAC,IAAI,CAACjB,kBAAkB,CAACa,MAAM,CAAC;QACvG;QACA,IAAIH,WAAW,EAAE;UACf;UACA,IAAG,IAAI,CAACT,aAAY,IAAK,QAAQ,EACjC;YACE,IAAGW,CAAA,GAAI,IAAI,CAACR,kBAAkB,GAAC,EAAE,EAAE;cACjCU,WAAU,GAAI,IAAI,CAACrB,IAAI,CAACsB,MAAM,CAACH,CAAC,CAAC;YACnC;UACF,OAAO;YACL;YACA,IAAII,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,EAAE;cACvBH,WAAU,GAAI,IAAI,CAACrB,IAAI,CAACsB,MAAM,CAACH,CAAC,CAAC;YACnC;UACF;QACF;QACAD,QAAO,GAAIA,QAAO,GAAIG,WAAW;QACjC,IAAIH,QAAO,KAAM,IAAI,CAAClB,IAAI,EAAE;UAC1BgB,GAAE,GAAI,IAAI;QACZ;MACF;MACA,IAAI,CAACH,IAAG,GAAIK,QAAQ;MACpB,IAAIF,GAAG,EAAE;QACPU,aAAa,CAAC,IAAI,CAACd,QAAQ,CAAC;MAC9B;IACF;EACF,CAAC;EACDe,OAAOA,CAAA,EAAG;IACR,IAAI,CAACf,QAAO,GAAIgB,WAAW,CAAC,IAAI,CAACb,QAAQ,EAAE,EAAE,CAAC;EAChD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}